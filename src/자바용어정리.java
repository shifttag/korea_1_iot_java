/*
1. 접근 제한자(Access Modifiers)
: 캡슐화(정보 은닉)를 하기 위해 주로 사용한다. \
	>> 즉 외부에서 내부 데이터에 접근하지 못하게 제한하는 역할을 한다

	1) public: 어느 패키지에서든 접근이 가능하다
	2) protected: 동일한 패키지에서 접근이 가능하고, 상속받은 자식클래스에서만 접근이 가능하다.
	3) default: 동일한 패키지 내에서만 접근이 가능하다
	4) private: 동일한 클래스 내에서만 접근이 가능하다.
	
2. static
 : 정적인 뜻을 가지고 있다.
 
 	1) static 변수: 한 범위 내에서 동일한 값을 유지해야할 때 선언한다.
 	2) static 메서드: 인스턴스 생성하지 않고 바로 호출이 가능하다.
 	
3. final
: 한 번 정해지면 더 이상 변경되지 않는다.

	1) final 변수: 상수
	2) final 메서드: 자식 메서드에서 오버라이딩 불가
	3) final 클래스: 상속 불가
	
4. abstract
: 추상

	1) abstract 클래스: 추상 메서드를 하나 이상 포함해야한다.
	2) abstract 메서드: 추상 메서드로서 정의만 하고 구현부는 없다.
	
5. interface VS abstract class

	1) interface: abstract class와 다르게 모든 메서드가 추상메서드여야 한다
	2) abstract class: 하나 이상의 메서드만 추상메서드여야 하고 다른 메서드들은 추상메서드가 아니여도 된다.
	
6. extends VS implements

	1) extends: 상속 받을 클래스에서 사용하는 키워드이다
	2) implements: 인터페이스를 받아올 클래스에서 사용하는 키워드이다.
	
7. super VS this

	1) this: 현재 객체 자신을 참조하는데 사용하는 키워드이다.
	2) super: 하위 클래스에서 상위 클래스로 접근할 때 사용하는 키워드이다.
	
8. 오버로딩(Overloading) VS 오버라이딩(Overriding)

	1) 오버로딩(Overloading): 메서드의 이름은 같으나 매개변수의 개수, 타입을 다르게 하여 
								메서드를 호출할 때 매개변수에 따라서 다른 메서드를 호출하게 한다
	2) 오버라이딩(Overriding): 메서드를 재정의 하는 용도이고, 
								메서드의 이름과 매개변수의 개수, 타입이 같아야 한다.

9. try-catch-finally

	1) try: 오류가 발생할 수 있는 구문을 try문에 넣는다
	2) catch: 오류가 발생했을 때 catch문을 실행시킨다
	3) finally: 오류가 발생 하든 안하든 최종적으로 한번 실행시킨다.




















*/
