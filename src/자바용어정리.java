/*
1. 접근 제한자(Access Modifiers)
: 캡슐화(정보 은닉)를 하기 위해 주로 사용한다. \
	>> 즉 외부에서 내부 데이터에 접근하지 못하게 제한하는 역할을 한다

	1) public: 어느 패키지에서든 접근이 가능하다
	2) protected: 동일한 패키지에서 접근이 가능하고, 상속받은 자식클래스에서만 접근이 가능하다.
	3) default: 동일한 패키지 내에서만 접근이 가능하다
	4) private: 동일한 클래스 내에서만 접근이 가능하다.
	
2. static
 : 정적인 뜻을 가지고 있다.
 
 	1) static 변수: 한 범위 내에서 동일한 값을 유지해야할 때 선언한다.
 	2) static 메서드: 인스턴스 생성하지 않고 바로 호출이 가능하다.
 	
3. final
: 한 번 정해지면 더 이상 변경되지 않는다.

	1) final 변수: 상수
	2) final 메서드: 자식 메서드에서 오버라이딩 불가
	3) final 클래스: 상속 불가
	
4. abstract
: 추상

	1) abstract 클래스: 추상 메서드를 하나 이상 포함해야한다.
	2) abstract 메서드: 추상 메서드로서 정의만 하고 구현부는 없다.
	
5. interface VS abstract class

	1) interface: abstract class와 다르게 모든 메서드가 추상메서드여야 한다
	2) abstract class: 하나 이상의 메서드만 추상메서드여야 하고 다른 메서드들은 추상메서드가 아니여도 된다.
	
6. extends VS implements

	1) extends: 상속 받을 클래스에서 사용하는 키워드이다
	2) implements: 인터페이스를 받아올 클래스에서 사용하는 키워드이다.
	
7. super VS this

	1) this: 현재 객체 자신을 참조하는데 사용하는 키워드이다.
	2) super: 하위 클래스에서 상위 클래스로 접근할 때 사용하는 키워드이다.
	
8. 오버로딩(Overloading) VS 오버라이딩(Overriding)

	1) 오버로딩(Overloading): 메서드의 이름은 같으나 매개변수의 개수, 타입을 다르게 하여 
								메서드를 호출할 때 매개변수에 따라서 다른 메서드를 호출하게 한다
	2) 오버라이딩(Overriding): 메서드를 재정의 하는 용도이고, 
								메서드의 이름과 매개변수의 개수, 타입이 같아야 한다.

9. try-catch-finally

	1) try: 오류가 발생할 수 있는 구문을 try문에 넣는다
	2) catch: 오류가 발생했을 때 catch문을 실행시킨다
	3) finally: 오류가 발생 하든 안하든 최종적으로 한번 실행시킨다.




# 자바 기초 용어 정리


# 접근제한자(Access Modifiers)

> 클래스, 메서드, 필드 등에 대한 접근 권한을 제어하는 데 사용

- **public**: 모든 클래스에서 접근 가능.
- **protected**: 같은 패키지 또는 상속 받은 클래스에서만 접근 가능.
- **default**: 접근제한자를 명시하지 않으면 기본으로 같은 패키지 내에서만 접근 가능.
- **private**: 같은 클래스 내에서만 접근 가능.


→ 접근 범위에 따라 결정
→ 같은 클래스/패키지/상속 클래스에서 접근할 수 있는지 여부가 중요 ‼️




# static

> 클래스 수준에서 공유되는 변수를 정의하거나 메서드를 선언할 때 사용

- **static 변수**: 모든 인스턴스가 공유하는 클래스 변수.
- **static 메서드**: 인스턴스가 아닌 클래스에서 직접 호출할 수 있는 메서드.

→ 객체 인스턴스가 아니라 클래스 자체에 속하는 변수나 메서드
→ 정적 멤버(변수, 메서드)의 경우 인스턴스화 필수 ❌
→ 일반 멤버(변수, 메서드)의 경우 인스턴스화 필수 ‼️

### cf) static class
> 자바에 static class에 대한 개념 ❌
→ 내부 클래스의 형태 중 static 중첩 클래스가 존재


- 정적(static) 중첩 클래스
    : 일반 클래스와 달리 외부 클래스의 인스턴스와 독립적으로 존재 가능
    → 외부 클래스의 인스턴스 없이도 객체 생성 가능
    

# final

> 수정 불가능한 것
→ 사용 위치에 따라 의미가 달라짐

- **final 변수**: 값을 한 번만 할당할 수 있고, 그 이후 변경할 수 없음.
- **final 메서드**: 해당 메서드를 하위 클래스에서 재정의(override)할 수 없음.
- **final 클래스**: 상속할 수 없는 클래스. 즉, 해당 클래스를 하위 클래스로 만들 수 없음.


→ 한 번 정해지면 더 이상 변경되지 않는다는 공통된 특성을 가짐



# abstract

> 추상화 개념을 적용할 때 사용
→ 주로 클래스와 메서드에 사용


- **abstract 클래스**: 인스턴스를 생성할 수 없고, 추상 메서드를 포함할 수 있는 클래스.
- **abstract 메서드**: 구현을 제공하지 않고 하위 클래스에서 반드시 구현해야 하는 메서드.


→ abstract은 구현이 없는 상태를 의미

→ 설계 단계에서 구체적인 구현을 하도록 미루는 데 사용

# interface `VS` abstract class



- **interface**: 구현이 없는 추상 메서드의 집합. 다중 구현이 가능하며, 메서드 선언만 포함.
- **abstract class**: 일부 구현을 포함할 수 있고, 상속을 통해 확장 가능. 단일 상속만 가능.


→ 인터페이스: 다중 구현 가능

→ 추상 클래스: 단일 상속만 가능, 구체적인 구현을 포함할 수 있음

# extends `VS` implements



- **extends**: 클래스가 다른 클래스를 상속받을 때 사용.
- **implements**: 클래스가 인터페이스를 구현할 때 사용.


→ extends: 클래스 간의 상속

→ implements: 인터페이스의 메서드를 구현

# super `VS` this



- **this**: 현재 인스턴스의 참조. 
        주로 필드와 지역 변수를 구분하거나, 생성자에서 다른 생성자를 호출할 때 사용.
- **super**: 부모 클래스의 참조. 부모 클래스의 메서드나 생성자를 호출할 때 사용.


→ this: 현재 객체

→ super: 부모 객체

# 오버로딩(Overloading) `vs` 오버라이딩(Overriding)



- **오버로딩**: 같은 이름의 메서드를 여러 개 정의하되, 매개변수 타입이나 개수가 다름.
- **오버라이딩**: 부모 클래스의 메서드를 자식 클래스에서 재정의하여 다른 동작을 구현.

→ 오버로딩: 메서드의 시그니처가 다를 때 사용
→ 오버라이딩: 상속받은 메서드의 구현을 변경할 때 사용

# try-catch-finally



- **try**: 예외가 발생할 수 있는 코드를 포함.
- **catch**: 예외가 발생했을 때 처리할 코드를 포함.
- **finally**: 예외가 발생하든 그렇지 않든 항상 실행되는 코드를 포함.


→ 예외 처리 흐름을 제어하는 데 사용
→ finally는 예외 처리 후 리소스 정리에 주로 사용



















*/
